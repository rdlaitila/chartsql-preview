/**

*/
component extends="Datastore" accessors="true" {

	property name="Database" required="true";
	property name="FolderPath" required="true";
	property name="Username" required="true";
	property name="Password" required="true";

	public function createTable(
		required string name,
		required SqlField[] fields
	){
		// Create the table matching the collection
		var colOut = [];
		for(var field in arguments.fields){
			arrayAppend(colOut, field.getName() & " " & field.getType());
		}

		var sql = "
			CREATE TABLE #arguments.name# (
			id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			#arrayToList(colOut)#
			);
		"
		query name="test" datasource="#this.getConnectionStruct()#" {
			echo(sql);
		}
		// create table
	}

	public function insertRow(
		required string name,
		required struct record
	){

		var keyArray = listToArray(structKeyList(arguments.record));
		var workingOut = [];
		for(var key in keyArray){
			arrayAppend(workingOut, arguments.record[key]);
		}

		var sql = "INSERT INTO #arguments.name# (";
		sql &= arrayToList(keyArray);
		sql &= ") VALUES (";
		sql &= arrayToList(workingOut.map(function(item){
			return "?";
			// return "'" & item & "'";
		}));
		sql &= ");";
		// writeDump(sql);
		query name="test" datasource="#this.getConnectionStruct()#" params="#workingOut#" {
			echo(sql)
		}
	}

	public function dropTable(required string name){

		// We are going to drop the table if it exists and recreate
				// it so that we always match the result and datatypes exactly
		var sql = ""
		sql &= "DROP TABLE IF EXISTS #arguments.name#;"

		query name="test" datasource="#this.getConnectionStruct()#"{
			echo(sql);
		}
	}

	public query function executeSql(required string sql){
		var result = "";
		query name="result" datasource="#this.getConnectionStruct()#"{
			echo(sql);
		}
		return result;
	}

	public function getConnectionStruct(){

		var path = this.getFolderPath() & server.separator.file;

		//remove double separators
		path = replace(path, server.separator.file & server.separator.file, server.separator.file, "all");

		if(!directoryExists(path)){
			directoryCreate(path, true);
		}

		var finalPath = path & this.getDatabase();
		// writeDump(finalPath);
		var out = {
			class: "org.hsqldb.jdbc.JDBCDriver",
			bundleName: "org.lucee.hsqldb",
			bundleVersion: "2.7.2.jdk8",
			// connectionString: "jdbc:hsqldb:file:C:\websites\chartsql\editor\db\mongo\#this.getDatabase()#",
			connectionString: "jdbc:hsqldb:file:#finalPath#",
			username: "#this.getUsername()#",
			password: "#this.getPassword()#",

			// optional settings
			connectionLimit:-1, // default:-1
			liveTimeout:15, // default: -1; unit: minutes
			validate:false, // default: false
		}
		return out;
	}

}